###Activity 1
###Create a simple shell script to tell the user about their session – they need to know:
###What their username is
###What the current date is
###What the time is
###What their current working directory is
###How many files they have in that directory
###What is the biggest file in their current directory


#! /bin/bash
echo `whoami`
echo `date`
echo `pwd`
echo `ls -l | grep "^-" | wc -l`
echo `du -a | sort -n -r | head -n 1`





###Activity 2
###Create a directory with a few test files in it (the files can be empty). Now write a script that for every file in that directory you rename it to have an extension of today's date in YYYYMMDD format.

#! /bin/bash
Today=`date +%Y%m%d`
echo $Today
for name in `ls /Users/debbiesong/scripts/activity/test`
do
echo $name
mv $name $name.$Today
done





###Activity 3
###You are in charge of creating a program for the lottery in your area! The options are for numbers between 1and 50. Create a script that picks 5 for each draw plus a bonus ball number between 1 and 10. Output the numbers to a file that has the date in its name.

#! /bin/bash
today=`date +%Y%m%d`
for i in {1..5};
do
echo $[$RANDOM%50+1] >> lottery.$today
done

echo $[$RANDOM%10+1] >> lottery.$today

      
      
      

###Create another script that will allow users to check their lottery numbers and advise them if they match or not and how many matches they got.

#!/bin/bash

echo -n "Enter your number:"
read num
echo $num

today=`date +%Y%m%d`
ans_1=`head -1 lottery.$today`
echo $ans_1

if [ $num == $ans_1 ]
then
echo correct
else
echo wrong
fi





###Activity 4
###Write a script to validate how secure someone's password is. Things you would care about:

###Length should be 8 or more characters
###The password should contain numbers and letters
###There should be both uppercase and lowercase letters

#!/bin/bash
echo "Please enter your password:"
read str
if [ ${#str} -ge 8 ] ;then
    if echo "$str"|grep "[a-zA-Z]" >/dev/null && echo "$str"|grep "[0-9]" >/dev/null ;then
       if echo "$str"|grep "[a-z]" >/dev/null && echo "$str"|grep "[A-Z]" >/dev/null ;then
          echo "The password is secure enough."
       else
          echo "There should be both uppercase and lowercase letters."
       fi
    else
       echo "The password should contain numbers and letters."
    fi
else
    echo "Length should be 8 or more characters."
fi





###Activity 5
###Write a script that takes a number as an input and reverses it out to the user. For example, if the original number is 74985, the output should be 58947.


#!/bin/bash
echo "Please enter a number:"
read num
echo "The reverse of the number:"
echo $num | rev





###Activity 6
###Create a script that takes two number parameters a and b and then shows True if a is larger than b or False otherwise.

#!/bin/bash
echo "Please enter number A:"
read a
expr $a + 1 >/dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "$a is not number"
    exit
fi
echo "Please enter number B:"
read b
expr $b + 1 >/dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "$b is not number"
    exit
fi
if(( $a > $b ));
then
echo "True"
else
echo "False"
fi





###Create a second version of the script that then tells the user the difference between the two numbers.
###Remember to code defensively – ensure that your script handles things appropriately if someone enters things incorrectly!

#!/bin/bash
echo "Please enter number A:"
read a
expr $a + 1 >/dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "$a is not number"
    exit
fi
echo "Please enter number B:"
read b
expr $b + 1 >/dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "$b is not number"
    exit
fi
val=`expr $a - $b`
echo "The difference between A and B is $val"





###Activity 7
###Create a 10-question true or false quiz game in your script. Choose a topic of your liking for the questions!


#!/bin/bash

echo " "
echo "10-question True or False quiz starts now!"
echo "Please enter True or False."
echo " "

echo "1. Do camels have three sets of eyelids?"
read a1
echo " "
if [ "$a1" == "True" ]; then
    echo "Correct!"
elif [ "$a1" == "False" ]; then
    echo "Wrong!"
else
    echo "Invalid input, please enter True or False. Exit the quiz!"
    exit
fi
echo " "
echo "2. It is possible to sneeze while sleeping."
read a2
echo " "
if [ "$a2" == "True" ]; then
    echo "Wrong!"
elif [ "$a2" == "False" ]; then
    echo "Correct!"
else
    echo "Invalid input, please enter True or False. Exit the quiz!"
    exit
fi
echo " "
echo "3. Australia is a country as well as a continent."
read a3
echo " "
if [ "$a3" == "True" ]; then
    echo "Correct!"
elif [ "$a3" == "False" ]; then
    echo "Wrong!"
else
    echo "Invalid input, please enter True or False. Exit the quiz!"
    exit
fi
echo " "
echo "4. Herbivore animals consume meat."
read a4
echo " "
if [ "$a4" == "True" ]; then
    echo "Wrong!"
elif [ "$a4" == "False" ]; then
    echo "Correct!"
else
    echo "Invalid input, please enter True or False. Exit the quiz!"
    exit
fi
echo " "
echo "5. The cell nucleus was discovered by Robert Brown."
read a5
echo " "
if [ "$a5" == "True" ]; then
    echo "Correct!"
elif [ "$a5" == "False" ]; then
    echo "Wrong!"
else
    echo "Invalid input, please enter True or False. Exit the quiz!"
    exit
fi
echo " "
echo "6. The national flag of America has 51 stars."
read a6
echo " "
if [ "$a6" == "True" ]; then
    echo "Correct!"
elif [ "$a6" == "False" ]; then
    echo "Wrong!"
else
    echo "Invalid input, please enter True or False. Exit the quiz!"
    exit
fi
echo " "
echo "7. Pneumonia is an infection that affects lungs."
read a7
echo " "
if [ "$a7" == "True" ]; then
    echo "Correct!"
elif [ "$a7" == "False" ]; then
    echo "Wrong!"
else
    echo "Invalid input, please enter True or False. Exit the quiz!"
    exit
fi
echo " "
echo "8. The capital of Spain is Madrid."
read a8
echo " "
if [ "$a8" == "True" ]; then
    echo "Correct!"
elif [ "$a8" == "False" ]; then
    echo "Wrong!"
else
    echo "Invalid input, please enter True or False. Exit the quiz!"
    exit
fi
echo " "
echo "9. Ears are responsible for smelling."
read a9
echo " "
if [ "$a9" == "True" ]; then
    echo "Wrong!"
elif [ "$a9" == "False" ]; then
    echo "Correct!"
else
    echo "Invalid input, please enter True or False. Exit the quiz!"
    exit
fi
echo " "
echo "10. The color of cherries is red."
read a10
echo " "
if [ "$a10" == "True" ]; then
    echo "Correct!"
elif [ "$a10" == "False" ]; then
    echo "Wrong!"
else
    echo "Invalid input, please enter True or False. Exit the quiz!"
    exit
fi

echo "Quiz ends!"





###Activity 8
###Create a script that completes the following tasks:

###It prompts the user for a series of 5-10 integers.
###The user must be prompted for a minimum of 5 numbers.
###After the user has entered 5 numbers, the program should allow the user to stop entry or enter another number.
###When the user chooses to stop or after 10 numbers have been entered, the program stops prompting for values and performs the following calculations:
###the product of the integers
###the average of the integers
###the sum of the integers
###the min of the integers
###the max of the integers
###After performing the calculations, the program should display the following to the user:
###the values the user entered
###each of the calculations, using a phrase that identifies the value


#!/bin/bash

#~/bin/bash

echo "Enter 5-10 integers:"
read one two three four five six seven eight nine ten

echo "Values entered:$one $two $three $four $five $six $seven $eight $nine $ten"




###Activity 9
###Write a script that takes a file name as a parameter.

###If the file exists, print an error and return a code.
###If the file does not exist, create the file.


#!/bin/bash

echo "Enter the file name:"
read file
if [ ! -e "$file" ] ; then
    touch "$file"
else
    echo "Error: The file exists!"
    exit 1
fi





###Activity 10
###Write a script that writes random numbers to a file (one number per line).

###The first parameter should be the file name.
###The second parameter is the number of lines to write.
###If the specified file already exists, display a relevant message and return a code.


#!/bin/bash

echo "Enter the new file name:"
read file
echo "Enter the number of lines:"
read number
if [ -f "$file" ]; then
    echo "$file already exists!"
    exit 1
else
    RANDOM=$$
    for i in `seq $number`
    do
       echo $RANDOM >> $file
    done
fi





###Activity 11
###Create a file that includes the following numbers.

touch number_11

###5 6 3 7 4 4 9 6 7 9 8 2 3 6 4 5 1 1 3 10 12
###Write a script that uses this file to perform the following tasks:

###Read in the file
###Sort the numbers into reverse order and output them to the screen
###Each number should output exactly once. Duplicate numbers should not appear in the output.


###the numbers are in file number_11 and each number is in one line
#!/bin/bash

cat number_11
echo " "
sort number_11 -n -r | uniq





###Activity 12
###Write a script that checks if two files have at least one common element or not. Display an appropriate message for both scenarios. The file names should be specified as parameters. You will need to create the files to test this.

#!/bin/bash

echo "Enter the first file name:"
read file1
echo "Enter the second file name:"
read file2
if test -z "$(grep -f $file1 $file2)"; then
  echo "There is no common element in these two files."
else 
  echo "These is at least one common element in these two files."
fi





###Activity 13
###Write a script that takes two files of unique numbers and displays the difference between the two lists (without using grep).

###For example:

###File 1 contains:

###1
###2
###4
###6
###File 2 contains:

###1
###2
###89
###6
###7
###The output should look like:

###Only in file 1:
###4

###Only in file 2:
###89
###7


###(without grep)
###my file 1 is 13_1 and my file 2 is 13_2
#!/bin/bash

sort -n 13_1 > 13_1s
sort -n 13_2 > 13_2s
echo "Only in file 1:"
comm -23 13_1s 13_2s
echo ""
echo "Only in file 2:"
comm -13 13_1s 13_2s





###Stretch: Create a new script that does the same thing using grep. Which script runs faster?


###(with grep)
###my file 1 is 13_1 and my file 2 is 13_2
#!/bin/bash

echo "Only in file 1:"
grep -v -f 13_2 13_1
echo ""
echo "Only in file 2:"
grep -v -f 13_1 13_2





###Activity 14
###In the materials folder on the server you will find a file called books. Copy this file to your home directory.

###Write a script that will parse the file, producing an output csv file that will list the word and each time it appears in the file.

###Make sure the list is sorted in the file such that the most common word is listed at the top and then descending. For example, a couple of lines in the output file should look like this:

###And,200
###Is,195


#!/bin/bash

cp books ~/

cat books | sort | uniq -c | sort -k1,1nr | head -10 > books.csv






###Activity 15
###Imagine that you support the fix Generator script. Write a wrapper script to set up your environment properly. You can also edit the fixGenerator script if you need to.

###Your fixGenerator script should be in a folder called FixGen in your home directory. The script needs to do the following:

###Check for a folder called FixGen/logs and if not present create it
###Compress all log files that are not the latest 3 logs files generated.
###Run the FixGenerator script with the log file being generated into the FixGen/logs directory.
###Once complete, add a cron job that will run Monday through Friday 6 a.m. to establish your environment.

###Remember to code defensively and ensure that you use exit codes so we know the job has successfully run. Your script should also output its own log file where we can see the status each step of the way of each part of the script.


#!/bin/bash

today=`date +%Y%j%H%M%S`
if [ ! -n ~/FixGen/logs ] ;then
  mkdir ~/FixGen
  mkdir ~/FixGen/logs
  echo "Successfully generate the directory." >> 15_$today.log
else
  echo "The folder ~/FixGen/logs already exists." >> 15_$today.log
fi


file=`ls -tr fixlog* | tail -n +4`
if [ ! -n "$file" ] ;then
  echo "There is no enough log files." >> 15_$today.log
else
  tar -cvf compress_log.tar $file
  echo "Successfully compress the following log files: $file" >>15_$today.log
fi


~/FixGen/logs/FixGenerator.sh &
if [ $? -ne 0 ];then
    echo "The script failed to run." >> 15_$today.log
else
    echo "The script runs successfully." >> 15_$today.log
fi



###Cronjob:
00 6 * * 1,2,3,4,5 /Users/debbiesong/FixGen/logs/fixGenerator.sh





###Activity 16
###Write a script that will output a csv that could be loaded into ITRS Geneos for monitoring on your fixGen script.

###It needs to parse the log file and produce a count of each message type that has been received or sent.
###Ensure you distinguish in the csv file if the message was sent or received.
###Also ensure you display the message type in English so it is easy to understand in monitoring. An example might look like:
###Number of Partial fills,12


#!/bin/bash

file=fixlog20220801110156.log
New=`cat $file | grep -o 150=0 | wc -l`
Part=`cat $file | grep -o 150=1 | wc -l`
Fill=`cat $file | grep -o 150=2 | wc -l`
Can=`cat $file | grep -o 150=4 | wc -l`
Pendcal=`cat $file | grep -o 150=6 | wc -l`

echo "Number of New orders,$New" >> $file.csv
echo "Number of Parial fills,$Part" >> $file.csv
echo "Number of Full fills,$Fill" >> $file.csv
echo "Number of Cancelled orders,$Can" >> $file.csv
echo "Number of Pending Cancel orders,$Pendcal" >> $file.csv






###Activity 17
###Create a script to convert your fix log file into a useful csv.

###Pull out the following information for each message:

###If the fix tag is in the message, leave a blank in the csv so that it will load appropriately in Excel.
###Translate the message type value into meaningful words.
###Ensure you have a header row in your csv file:
###Client, Message type, stock, quantity, price, side, order id, last quantity, exec id, last price


#!/bin/bash

file=fixlog20220801110156.log
sed -i 'Client, Message type, stock, quantity, price, side, order id, last quantity, exec id, last price' $file.csv

awk -F';' '{print $5,$11,$7,$17,$10,$13,$21,$15,$16,$14}' $file >> $file.csv




###Activity 18
###Run the fixGenerator script to generate a fix log file.

./fixGenerator.sh


###Create a script to parse that log file and for each order create a text description of what happened with that order.
###This should go into a log file with a paragraph for each order.
###For example:

###New buy order for apple with order id 12335, 100 shares at price 54.2 
###Partial fill for apple with order id 12335, 20 shares at price 54.2
###Cancel message for apple with order id 12335
###Final state of order for apple with order id 12335: traded 40 shares at price 54.2. 
###Remember that each time you run the fix generator script, it creates a new log file so this is a good way to test.

sed 


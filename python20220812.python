#1
class Fruit:
    flavor=""
    name=""
    color=""
    price=""
    
#2
f_1 = Fruit()
f_2 = Fruit()
f_3 = Fruit()
f_4 = Fruit()

f_1.flavor="sweet"
f_1.name="watermelon"
f_1.color="green"
f_1.price="5"

f_2.flavor="sour"
f_2.name="lemon"
f_2.color="yellow"
f_2.price="3"

f_3.flavor="sweet"
f_3.name="cherry"
f_3.color="red"
f_3.price="10"

f_4.flavor="sweet"
f_4.name="grape"
f_4.color="purple"
f_4.price="5"

print(f_1.flavor,f_1.name,f_1.color,f_1.price)
print(f_2.flavor,f_2.name,f_2.color,f_2.price)
print(f_3.flavor,f_3.name,f_3.color,f_3.price)
print(f_4.flavor,f_4.name,f_4.color,f_4.price)


##3 

class Fruit:
    flavor=""
    name=""
    color=""
    price=""
    def __init__(self,attr1,attr2,attr3,attr4): #self refers to the current object
        self.flavor = attr1 #assign input attr1 to first_name
        self.name = attr2 #assign input attr2 to last_name
        self.color = attr3
        self.price = attr4

f_1=Fruit("sweet","watermelon","green","5")
f_2=Fruit("sour","lemon","yellow","5")
f_3=Fruit("sweet","cherry","red","5")
f_4=Fruit("sweet","grape","purple","5")

#4
class Fruit:
    flavor=""
    name=""
    color=""
    price=""
    def __init__(self,attr1,attr2,attr3,attr4): #self refers to the current object
        self.flavor = attr1 #assign input attr1 to first_name
        self.name = attr2 #assign input attr2 to last_name
        self.color = attr3
        self.price = attr4
        
    def display_info(self):
        print("Fruit Name: " + self.name)
        print("Fruit Flavor: " + self.flavor)
        print("Fruit Color: " + self.color)
        print("Fruit Price: " + self.price)
        
f_1=Fruit("sweet","watermelon","green","5")
f_2=Fruit("sour","lemon","yellow","5")
f_3=Fruit("sweet","cherry","red","5")
f_4=Fruit("sweet","grape","purple","5")

f_1.display_info()
f_2.display_info()
f_3.display_info()
f_4.display_info()

#5
class Fruit:
    flavor=""
    name=""
    color=""
    price=""
    def __init__(self,attr1,attr2,attr3,attr4): #self refers to the current object
        self.flavor = attr1 #assign input attr1 to first_name
        self.name = attr2 #assign input attr2 to last_name
        self.color = attr3
        self.price = attr4
        
    def display(self):
        print("Fruit Name: " + self.name)
        print("Fruit Flavor: " + self.flavor)
        print("Fruit Color: " + self.color)
        print("Fruit Price: " + self.price)
        
class Owner:
    fname = None
    lname = None
    f = None #address will hold the address information about a person
    def __init__(self,fname,lname,finfo):
        self.fname = fname
        self.lname = lname
        self.f = finfo
    def display(self):
        print(self.fname + " " + self.lname)
        self.f.display()

w = Fruit("sweet","watermelon","green","5")
wo = Owner("Lily","Lee",w)
wo.display()





#Self-assessment: A Simple Calculator
#Song Jiaze 2022-08-12

class SimpleCalculator():
    def __init__(self, var1, var2):
        self.var1 = var1
        self.var2 = var2

    def addition(self):
        return self.var1 + self.var2

    def subtraction(self):
        return self.var1 - self.var2

    def multiplication(self):
        return self.var1 * self.var2

    def division(self):
        return self.var1 / self.var2

while True:
    var1 = int(input('Please enter the first number: '))
    var2 = int(input('Please enter the second number: '))
    v = SimpleCalculator(var1, var2)
    def menu():
        x = ('Addition \nSubtraction \nMultiplication \nDivision \nExit (Quit)')
        print(x)
    menu()
    choice = input('Please select one of the above operators: ')
    if choice.casefold() == 'addition':
        print("Result:", v.addition(),"\n")
    elif choice.casefold() == 'subtraction':
        print("Result:", v.subtraction(),"\n")
    elif choice.casefold() == 'multiplication':
        print("Result:", v.multiplication(),"\n")
    elif choice.casefold() == 'division':
        print("Result:", v.division(),"\n")
    elif (choice.casefold() == 'quit' or choice.casefold() == 'exit'):
        print("The program ends. Thanks for your input.\n")
        break
    else:
        print("Please try again.\n")
 
 
 
 #Inheritance
 #0
 class Fruit:
    flavor=""
    name=""
    color=""
    price=""
    def __init__(self,attr1,attr2,attr3,attr4): #self refers to the current object
        self.flavor = attr1 #assign input attr1 to first_name
        self.name = attr2 #assign input attr2 to last_name
        self.color = attr3
        self.price = attr4
        
    def display(self):
        print("Fruit Name: " + self.name)
        print("Fruit Flavor: " + self.flavor)
        print("Fruit Color: " + self.color)
        print("Fruit Price: " + self.price)
        
#1,2
class Owner(Fruit):
    first_name=None
    last_name=None
    a=None
    def __init__(self,ainfo,fname,lname):
        self.first_name = fname
        self.last_name = lname
        self.a = ainfo
        
    def display(self):
        Fruit.display(self)
        print("The owner of the fruit is",self.first_name,self.last_name)

f_1=Fruit("sweet","watermelon","green","5")
f_2=Fruit("sour","lemon","yellow","5")
of_1 = Owner(f_1,"Lily","Lee")
of_2 = Owner(f_2,"Green","Ta")
of_1.display()
of_2.display()

#3,4
class Fruit:
    flavor = ""
    name = ""
    color = ""
    price = ""

    def __init__(self, attr1, attr2, attr3, attr4):
        self.flavor = attr1 
        self.name = attr2  
        self.color = attr3
        self.price = attr4

    def display(self):
        print("Fruit name: " + self.name)
        print("Fruit flavor: " + self.flavor)
        print("Fruit color: " + self.color)
        print("Fruit Price: " + self.price)


class Shop(Fruit):
    shop_id = None
    shop_type = None
    shop_name = None

    def __init__(self, shop_id, shop_type, shop_name, attr1, attr2, attr3, attr4):
        Fruit.__init__(self, attr1, attr2, attr3, attr4)
        self.shop_id = shop_id
        self.shop_type = shop_type
        self.shop_name = shop_name

    def display(self):
        print("Shop ID: " + self.shop_id)
        print("Shop Type: " + self.shop_type)
        print("Shop Name: " + self.shop_name)
        Fruit.display(self)


class Director(Shop):
    director_level = None
    director_name = None
    director_id = None

    def __init__(self, shop_id, shop_type, shop_name, attr1, attr2, attr3, attr4, d_level, d_name, d_id):
        Shop.__init__(self, shop_id, shop_type, shop_name, attr1, attr2, attr3, attr4)
        self.director_level = d_level
        self.director_name = d_name
        self.director_id = d_id

    def display(self):
        Shop.display(self)
        print("Director Level: " + str(self.director_level))
        print("Director Name: " + str(self.director_name))
        print("Director ID: " + str(self.director_id))


d1 = Director("0001", "supermarket", "ABC Supermarket", "sweet", "watermelon", "green", "5", "D-LEVEL-1", "Bobby", "092812")
d1.display()
d2 = Director("0002", "fruit shop", "The Red Star Shop", "sour", "lemon", "yellow", "5", "D-LEVEL-5", "Candice", "037281")
d2.display()
 
#5
class Sweet(Fruit):
    fruit_id = None
    def __init__(self,attr2,attr3,attr4,fruit_id):
        Fruit.__init__(self, "sweet", attr2, attr3, attr4)
        self.fruit_id = fruit_id
    def display(self):
        Fruit.display(self)
        print("The fruit ID is:", self.fruit_id)
a_1 = Sweet("apple","red","2","001")
a_1.display()
a_2 = Sweet("melon","green","10","002")
a_2.display()

#6
class Sour(Fruit):
    fruit_id = None
    def __init__(self,attr2,attr3,attr4,fruit_id):
        Fruit.__init__(self, "sour", attr2, attr3, attr4)
        self.fruit_id = fruit_id
    def display(self):
        Fruit.display(self)
        print("The fruit ID is:", self.fruit_id)

b_1 = Sour("lemon","yellow","1","003")
b_1.display()

print(isinstance(b_1,Fruit))





#Self-Assessment: File System
#Song Jiaze 2022-08-12

class FileItem:
    name = None
    permission = None
    owner = None
    size = None

    def __init__(self, name, permission, owner, size):
        self.name = name
        self.permission = permission
        self.owner = owner
        self.size = size

    def display(self):
        print(self.name, self.permission, self.owner, self.size)


class CsvFile(FileItem):
    csv_delimiter = None

    def __init__(self, name, permission, owner, size, csv_delimiter):
        FileItem.__init__(self, name, permission, owner, size)
        self.csv_delimiter = csv_delimiter


class JpgFile(FileItem):
    jpg_color = None

    def __init__(self, name, permission, owner, size, jpg_color):
        FileItem.__init__(self, name, permission, owner, size)
        self.jpg_color = jpg_color


class Mp3File(FileItem):
    mp3_type = None

    def __init__(self, name, permission, owner, size, mp3_type):
        FileItem.__init__(self, name, permission, owner, size)
        self.mp3_type = mp3_type


class Directory(FileItem):
    item = None

    def __init__(self, name, permission, owner, size):
        FileItem.__init__(self, name, permission, owner, size)
        self.item = []

    def display(self):
        FileItem.display(self)
        print("The above directory includes the following files:")
        for i in self.item:
            i.display()
        print("")

    def add_file(self, files):
        for i in files:
            self.item.append(i)

#Create a filesystem with at least 20 objects
#Include at least three objects of each type (CsvFile, JpgFile, Mp3File, and Directory)
csv_1 = CsvFile("csv1", "rwx", "Lily", "1MB", ",")
csv_2 = CsvFile("csv2", "rw", "Lily", "2MB", ",")
csv_3 = CsvFile("csv3", "wx", "Lily", "3MB", ",")
csv_4 = CsvFile("csv4", "rx", "Lily", "4MB", ",")
csv_5 = CsvFile("csv5", "rwx", "Lily", "5MB", ",")

jpg_1 = JpgFile("jpg1", "rwx", "Lily", "1MB", "color")
jpg_2 = JpgFile("jpg2", "rwx", "Lily", "2MB", "color")
jpg_3 = JpgFile("jpg3", "rx", "Lily", "3MB", "B&W")
jpg_4 = JpgFile("jpg4", "rwx", "Lily", "10MB", "color")
jpg_5 = JpgFile("jpg5", "rwx", "Lily", "15MB", "color")

mp3_1 = Mp3File("mp31", "rwx", "Lily", "1MB", "jazz")
mp3_2 = Mp3File("mp32", "rwx", "Lily", "3MB", "R&B")
mp3_3 = Mp3File("mp33", "rx", "Lily", "10MB", "hippop")
mp3_4 = Mp3File("mp34", "wx", "Lily", "2MB", "jazz")
mp3_5 = Mp3File("mp35", "wx", "Lily", "3MB", "Rap")

directory_1 = Directory("dir1", "rwx", "Lily", "500")
directory_2 = Directory("dir2", "rwx", "Lily", "500")
directory_3 = Directory("dir3", "rwx", "Lily", "500")
directory_4 = Directory("dir4", "rwx", "Lily", "500")
directory_5 = Directory("dir5", "rwx", "Lily", "500")

directory_1.add_file([csv_2, jpg_1, mp3_5])

#Include at least one directory that contains at least two other directories and at least two files.
directory_2.add_file([csv_3, jpg_2, mp3_1, directory_1, directory_5])

#Include a directory structure with a depth of at least three (directory in a directory in a directory)
directory_3.add_file([csv_1, jpg_3, mp3_2, directory_2])
directory_4.add_file([csv_4, jpg_4, mp3_4, directory_5])
directory_5.add_file([csv_5, jpg_5, mp3_5])

directory_4.display()



    
        
